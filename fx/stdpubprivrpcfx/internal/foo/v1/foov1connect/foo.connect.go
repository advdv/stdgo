// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fx/stdpubprivrpcfx/internal/foo/v1/foo.proto

package foov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/advdv/stdgo/fx/stdpubprivrpcfx/internal/foo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SystemServiceName is the fully-qualified name of the SystemService service.
	SystemServiceName = "fx.stdpubprivrpcfx.internal.foo.v1.SystemService"
	// ReadWriteServiceName is the fully-qualified name of the ReadWriteService service.
	ReadWriteServiceName = "fx.stdpubprivrpcfx.internal.foo.v1.ReadWriteService"
	// ReadOnlyServiceName is the fully-qualified name of the ReadOnlyService service.
	ReadOnlyServiceName = "fx.stdpubprivrpcfx.internal.foo.v1.ReadOnlyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SystemServiceInitOrganizationProcedure is the fully-qualified name of the SystemService's
	// InitOrganization RPC.
	SystemServiceInitOrganizationProcedure = "/fx.stdpubprivrpcfx.internal.foo.v1.SystemService/InitOrganization"
	// ReadOnlyServiceWhoAmIProcedure is the fully-qualified name of the ReadOnlyService's WhoAmI RPC.
	ReadOnlyServiceWhoAmIProcedure = "/fx.stdpubprivrpcfx.internal.foo.v1.ReadOnlyService/WhoAmI"
)

// SystemServiceClient is a client for the fx.stdpubprivrpcfx.internal.foo.v1.SystemService service.
type SystemServiceClient interface {
	InitOrganization(context.Context, *connect.Request[v1.InitOrganizationRequest]) (*connect.Response[v1.InitOrganizationResponse], error)
}

// NewSystemServiceClient constructs a client for the
// fx.stdpubprivrpcfx.internal.foo.v1.SystemService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSystemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	systemServiceMethods := v1.File_fx_stdpubprivrpcfx_internal_foo_v1_foo_proto.Services().ByName("SystemService").Methods()
	return &systemServiceClient{
		initOrganization: connect.NewClient[v1.InitOrganizationRequest, v1.InitOrganizationResponse](
			httpClient,
			baseURL+SystemServiceInitOrganizationProcedure,
			connect.WithSchema(systemServiceMethods.ByName("InitOrganization")),
			connect.WithClientOptions(opts...),
		),
	}
}

// systemServiceClient implements SystemServiceClient.
type systemServiceClient struct {
	initOrganization *connect.Client[v1.InitOrganizationRequest, v1.InitOrganizationResponse]
}

// InitOrganization calls fx.stdpubprivrpcfx.internal.foo.v1.SystemService.InitOrganization.
func (c *systemServiceClient) InitOrganization(ctx context.Context, req *connect.Request[v1.InitOrganizationRequest]) (*connect.Response[v1.InitOrganizationResponse], error) {
	return c.initOrganization.CallUnary(ctx, req)
}

// SystemServiceHandler is an implementation of the fx.stdpubprivrpcfx.internal.foo.v1.SystemService
// service.
type SystemServiceHandler interface {
	InitOrganization(context.Context, *connect.Request[v1.InitOrganizationRequest]) (*connect.Response[v1.InitOrganizationResponse], error)
}

// NewSystemServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSystemServiceHandler(svc SystemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	systemServiceMethods := v1.File_fx_stdpubprivrpcfx_internal_foo_v1_foo_proto.Services().ByName("SystemService").Methods()
	systemServiceInitOrganizationHandler := connect.NewUnaryHandler(
		SystemServiceInitOrganizationProcedure,
		svc.InitOrganization,
		connect.WithSchema(systemServiceMethods.ByName("InitOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fx.stdpubprivrpcfx.internal.foo.v1.SystemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SystemServiceInitOrganizationProcedure:
			systemServiceInitOrganizationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSystemServiceHandler struct{}

func (UnimplementedSystemServiceHandler) InitOrganization(context.Context, *connect.Request[v1.InitOrganizationRequest]) (*connect.Response[v1.InitOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fx.stdpubprivrpcfx.internal.foo.v1.SystemService.InitOrganization is not implemented"))
}

// ReadWriteServiceClient is a client for the fx.stdpubprivrpcfx.internal.foo.v1.ReadWriteService
// service.
type ReadWriteServiceClient interface {
}

// NewReadWriteServiceClient constructs a client for the
// fx.stdpubprivrpcfx.internal.foo.v1.ReadWriteService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReadWriteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReadWriteServiceClient {
	return &readWriteServiceClient{}
}

// readWriteServiceClient implements ReadWriteServiceClient.
type readWriteServiceClient struct {
}

// ReadWriteServiceHandler is an implementation of the
// fx.stdpubprivrpcfx.internal.foo.v1.ReadWriteService service.
type ReadWriteServiceHandler interface {
}

// NewReadWriteServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReadWriteServiceHandler(svc ReadWriteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/fx.stdpubprivrpcfx.internal.foo.v1.ReadWriteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReadWriteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReadWriteServiceHandler struct{}

// ReadOnlyServiceClient is a client for the fx.stdpubprivrpcfx.internal.foo.v1.ReadOnlyService
// service.
type ReadOnlyServiceClient interface {
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
}

// NewReadOnlyServiceClient constructs a client for the
// fx.stdpubprivrpcfx.internal.foo.v1.ReadOnlyService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReadOnlyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReadOnlyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	readOnlyServiceMethods := v1.File_fx_stdpubprivrpcfx_internal_foo_v1_foo_proto.Services().ByName("ReadOnlyService").Methods()
	return &readOnlyServiceClient{
		whoAmI: connect.NewClient[v1.WhoAmIRequest, v1.WhoAmIResponse](
			httpClient,
			baseURL+ReadOnlyServiceWhoAmIProcedure,
			connect.WithSchema(readOnlyServiceMethods.ByName("WhoAmI")),
			connect.WithClientOptions(opts...),
		),
	}
}

// readOnlyServiceClient implements ReadOnlyServiceClient.
type readOnlyServiceClient struct {
	whoAmI *connect.Client[v1.WhoAmIRequest, v1.WhoAmIResponse]
}

// WhoAmI calls fx.stdpubprivrpcfx.internal.foo.v1.ReadOnlyService.WhoAmI.
func (c *readOnlyServiceClient) WhoAmI(ctx context.Context, req *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return c.whoAmI.CallUnary(ctx, req)
}

// ReadOnlyServiceHandler is an implementation of the
// fx.stdpubprivrpcfx.internal.foo.v1.ReadOnlyService service.
type ReadOnlyServiceHandler interface {
	WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error)
}

// NewReadOnlyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReadOnlyServiceHandler(svc ReadOnlyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	readOnlyServiceMethods := v1.File_fx_stdpubprivrpcfx_internal_foo_v1_foo_proto.Services().ByName("ReadOnlyService").Methods()
	readOnlyServiceWhoAmIHandler := connect.NewUnaryHandler(
		ReadOnlyServiceWhoAmIProcedure,
		svc.WhoAmI,
		connect.WithSchema(readOnlyServiceMethods.ByName("WhoAmI")),
		connect.WithHandlerOptions(opts...),
	)
	return "/fx.stdpubprivrpcfx.internal.foo.v1.ReadOnlyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReadOnlyServiceWhoAmIProcedure:
			readOnlyServiceWhoAmIHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReadOnlyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReadOnlyServiceHandler struct{}

func (UnimplementedReadOnlyServiceHandler) WhoAmI(context.Context, *connect.Request[v1.WhoAmIRequest]) (*connect.Response[v1.WhoAmIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("fx.stdpubprivrpcfx.internal.foo.v1.ReadOnlyService.WhoAmI is not implemented"))
}
